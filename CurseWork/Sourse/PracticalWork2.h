#ifndef PRACTICALWORK2
#define PRACTICALWORK2
#include <iostream>
#include <ctime>
#include <chrono>

#define N2 100 //позвол€ет как бы переменно задавать размер массивов, так как компил€тор не дает использовать переменные, кроме констант
extern bool wasArrSort; /*нужна, чтобы знать, отсортирован ли массив arrSort, если пользователь перестановкой изменил его,
				 то перед большинством функций ему предложат пересортировать массив, иначе функци€ не выплнитс€*/

void newArr(int*, int*); //создание массивов, повторный вызов пересоздаст массивы
void quicksort(int*, int, int); //сортировка, использующа€ опорное число
int findElem(int*, int, int, int); //выдает индекс элемента, если он есть в массиве, и -1, если такого элемента нет
int simpFindElem(int*, int, int, int); //делает тоже самое, но простым перебором, а не бинарным поиском
void findAllMed(int*, int, int); //находит все элементы, равные половине суммы максимального и минимального элементов
double findPlace(int*, int, int, int); //находит позицию элемента, если элемента нет, выдает позицию между которых он бы был
void userFindLess(int*); //пользователь вводит элемент, после чего выводитс€ кол-во элементов меньше этого числа
void userFindMore(int*); //пользователь вводит элемент, после чего выводитс€ кол-во элементов больше этого числа
void userSwap(int*); //пользователь вводит пару индексов, после чего в отсортированном массиве соответсвующие элементы мен€ютс€ местами
void userFindNumber(int*); //пользователь вводит число, после чего находитс€ соответствующий элемент бинарным поиском и простым перебором

int genQuicksort(int*, int, int, int); //функци€ дл€ сортировки с выводом коментариев
void generator(); //функци€ дл€ доп задани€ 10: генератор заданий
void variant(int*); //функци€ дл€ доп задани€ 5: работа с четными числами


int practicalWork2();
#endif